export function simplify(s: string) {
  return (
    (s || "")
      .toLowerCase()
      .normalize("NFKD")
      .replace(/[\u0300-\u036f]/g, "")
      // ‚ö†Ô∏è –æ—Å—Ç–∞–≤–ª—è–µ–º –ª–∞—Ç–∏–Ω–∏—Ü—É, –∫–∏—Ä–∏–ª–ª–∏—Ü—É –∏ –∞—Ä–∞–±—Å–∫–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω \u0600-\u06FF
      .replace(/[^a-z–∞-—è—ë—ñ—ó“ë“±“õ“£“ª”©”ô√ßƒü≈üƒ±√±0-9\u0600-\u06FF'‚Äô\-\s]/g, "")
      .replace(/\s+/g, " ")
      .trim()
  );
}

export function normalizeLatin(s: string) {
  let t = simplify(s);
  t = t
    .replace(/·∏•/g, "h")
    .replace(/ƒÅ/g, "a")
    .replace(/ƒ´/g, "i")
    .replace(/≈´/g, "u");
  t = t.replace(/llƒÅh|llah/g, "llah");
  return t;
}

export function normalizeRu(s: string) {
  let t = simplify(s);
  t = t.replace(/–π/g, "–∏").replace(/—ë/g, "–µ").replace(/—ä|—å/g, "");
  t = t
    .replace(/–∫—ä|–∫—å|“õ/g, "–∫")
    .replace(/“ì/g, "–≥")
    .replace(/“ª|h/g, "—Ö");
  t = t.replace(/–∞–ª–ª–∞—Ö—É|–∞–ª–ª–∞—Ö/g, "–ª–ª–∞—Ö");
  return t;
}

// üî• –ù–û–í–û–ï: –∞—Ä–∞–±—Å–∫–∞—è –≥—Ä–∞—Ñ–∏–∫–∞ ‚Äî —É–¥–∞–ª—è–µ–º –æ–≥–ª–∞—Å–æ–≤–∫–∏, —É–ø—Ä–æ—Å—Ç–∏–º –∞–ª–∏—Ñ/—Ç–∞–º–∞—Ä–±—É—Ç–∞ –∏ –ø—Ä.
export function normalizeAr(s: string) {
  let t = (s || "").toLowerCase();
  // —É–±—Ä–∞—Ç—å –æ–≥–ª–∞—Å–æ–≤–∫–∏
  t = t.normalize("NFKD").replace(/[\u064B-\u065F\u0670\u06D6-\u06ED]/g, "");
  // —Ä–∞–∑–Ω—ã–µ –∞–ª–∏—Ñ—ã –∫ –æ–±—ã—á–Ω–æ–º—É –∞–ª–∏—Ñ—É
  t = t.replace(/[\u0671\u0672\u0673\u0675\u0622\u0623\u0625]/g, "\u0627"); // ÿ°-–≤–∞—Ä–∏–∞–Ω—Ç—ã –∞–ª–∏—Ñ–∞ ‚Üí ÿß
  // —Ç–∞ –º–∞—Ä–±—É—Ç–∞ ‚Üí —Ö–∞
  t = t.replace(/\u0629/g, "\u0647"); // ÿ© ‚Üí Ÿá
  // –∞–ª–∏—Ñ –º–∞–∫—Å—É—Ä–∞ ‚Üí —è
  t = t.replace(/\u0649/g, "\u064A"); // Ÿâ ‚Üí Ÿä
  // –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
  t = t.replace(/\s+/g, " ").trim();
  return t;
}

// –Ø–∫–æ—Ä—è: —Ç–µ–∫—Å—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –ª–∞—Ç–∏–Ω–∏—Ü–∞/–∫–∏—Ä–∏–ª–ª–∏—Ü–∞/–∞—Ä–∞–±—Å–∫–∏–π ‚Äî –ø—Ä–æ—Å—Ç–æ contains() –ø–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–º—É –∫–∞–Ω–∞–ª—É
export function hasAnchors(text: string, anchors: string[]) {
  const t = simplify(text);
  let hit = 0;
  for (const a of anchors || []) {
    if (!a) continue;
    if (t.includes(a)) hit++;
  }
  return hit;
}
